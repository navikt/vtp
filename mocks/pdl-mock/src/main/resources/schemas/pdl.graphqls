# SOURCE repo:pdl:apps/api/src/main/resources/schemas/pdl.graphqls
# ISO-8601 representasjon for en kalenderdato. YYYY-MM-DD. Eksempel: 2018-01-01.
scalar Date

# ISO-8601 representasjon for en kalenderdato med tid, trunkert til nærmeste sekund. YYYY-MM-DD'T'hh:mm:ss. Eksempel: 2018-01-01T12:00:00.
scalar DateTime

# Schema parser kjenner ikke til Typen long  men den er støttet av graphql-java, så definerer den her for at schema skal validere.
scalar Long

schema {
    query: Query
}

type Query {
    hentPerson(ident: ID!): Person
    hentPersonBolk(identer: [ID!]!): [HentPersonBolkResult!]!
    hentIdenter(ident: ID!, grupper: [IdentGruppe!], historikk: Boolean = false): Identliste
    hentIdenterBolk(identer: [ID!]!, grupper: [IdentGruppe!], historikk: Boolean = false): [HentIdenterBolkResult!]!
    hentGeografiskTilknytning(ident: ID!): GeografiskTilknytning
    hentGeografiskTilknytningBolk(identer: [ID!]!): [hentGeografiskTilknytningBolkResult!]!
    sokPerson(criteria:[Criterion], paging:Paging): PersonSearchResult
    sokAdresse(criteria:[Criterion], paging:Paging): AdresseSearchResult
    forslagAdresse(parameters:CompletionParameters): AdresseCompletionResult
    hentAdresse(matrikkelId: ID!): KartverketAdresse
}

type KartverketAdresse {
    id: Long!
    vegadresse: KartverketVegadresse
    matrikkeladresse: KartverketMatrikkeladresse
}

type KartverketMatrikkeladresse {
    undernummer: Int
    representasjonspunkt: KartverketRepresentasjonspunkt
    adressetilleggsnavn: String
    kortnavn: String
    postnummeromraade: KartverketPostnummeromraade
    grunnkrets: KartverketGrunnkrets
    bydel: KartverketBydel
    matrikkelnummer: KartverketMatrikkelnummer
}

type KartverketMatrikkelnummer {
    kommunenummer: String
    gaardsnummer: Int
    bruksnummer: Int
    festenummer: Int
    seksjonsnummer: Int
}

type KartverketVegadresse {
    nummer: Int
    bokstav: String
    representasjonspunkt: KartverketRepresentasjonspunkt
    adressetilleggsnavn: String
    kortnavn: String
    postnummeromraade: KartverketPostnummeromraade
    grunnkrets: KartverketGrunnkrets
    veg: KartverketVeg
    bydel: KartverketBydel
}

type KartverketPostnummeromraade {
    poststed: String
    postnummer: String
}

type KartverketGrunnkrets {
    grunnkretsnavn: String
    grunnkretsnummer: String
}

type KartverketRepresentasjonspunkt {
    posisjonskvalitet: Int
    x: Float
    y: Float
    z: Float
}

type KartverketBydel {
    bydelsnavn: String
    bydelsnummer: String
}

type KartverketVeg {
    adressekode: Int
    adressenavn: String
    kortnavn: String
    stedsnummer: String
    kommune: KartverketKommune
}

type KartverketKommune {
    nummer: String
    navn: String
    fylke: KartverketFylke
}

type KartverketFylke {
    nummer: String
    navn: String
}

type Identliste {
    identer: [IdentInformasjon!]!
}

type HentIdenterBolkResult {
    ident: String!
    identer: [IdentInformasjon!]
    code: String!
}

type IdentInformasjon {
    ident: String!
    gruppe: IdentGruppe!
    historisk: Boolean!
}

enum IdentGruppe {
    AKTORID,
    FOLKEREGISTERIDENT,
    NPID
}

type HentPersonBolkResult {
    ident: String!
    person: Person
    code: String!
}

type Person {
    adressebeskyttelse(historikk: Boolean = false): [Adressebeskyttelse!]!
    bostedsadresse(historikk: Boolean = false): [Bostedsadresse!]!
    deltBosted(historikk: Boolean = false): [DeltBosted!]!
    doedfoedtBarn: [DoedfoedtBarn!]!
    doedsfall: [Doedsfall!]!
    falskIdentitet: FalskIdentitet
    foedsel: [Foedsel!]! @deprecated(reason: "Erstattet av foedselsdato & foedested")
    foedselsdato: [Foedselsdato!]!
    foedested: [Foedested!]!
    navspersonidentifikator(historikk: Boolean = false): [Navspersonidentifikator!]!
    folkeregisteridentifikator(historikk: Boolean = false): [Folkeregisteridentifikator!]!
    folkeregisterpersonstatus(historikk: Boolean = false): [Folkeregisterpersonstatus!]!
    forelderBarnRelasjon: [ForelderBarnRelasjon!]!
    foreldreansvar(historikk: Boolean = false): [Foreldreansvar!]!
    identitetsgrunnlag(historikk: Boolean = false): [Identitetsgrunnlag!]!
    kjoenn(historikk: Boolean = false): [Kjoenn!]!
    kontaktadresse(historikk: Boolean = false): [Kontaktadresse!]!
    kontaktinformasjonForDoedsbo(historikk: Boolean = false): [KontaktinformasjonForDoedsbo!]!
    navn(historikk: Boolean = false): [Navn!]!
    opphold(historikk: Boolean = false):[Opphold!]!
    oppholdsadresse(historikk: Boolean = false):[Oppholdsadresse!]!
    sikkerhetstiltak:[Sikkerhetstiltak!]!
    sivilstand(historikk: Boolean = false):[Sivilstand!]!
    statsborgerskap(historikk: Boolean = false): [Statsborgerskap!]!
    telefonnummer(historikk: Boolean = false): [Telefonnummer!]!
    tilrettelagtKommunikasjon:[TilrettelagtKommunikasjon!]!
    utenlandskIdentifikasjonsnummer(historikk: Boolean = false): [UtenlandskIdentifikasjonsnummer!]!
    innflyttingTilNorge: [InnflyttingTilNorge!]!
    utflyttingFraNorge: [UtflyttingFraNorge!]!
    vergemaalEllerFremtidsfullmakt(historikk: Boolean = false): [VergemaalEllerFremtidsfullmakt!]!
    rettsligHandleevne(historikk: Boolean = false): [RettsligHandleevne!]!
}

type DeltBosted {
    startdatoForKontrakt: Date!
    sluttdatoForKontrakt: Date

    coAdressenavn: String
    vegadresse: Vegadresse
    matrikkeladresse: Matrikkeladresse
    utenlandskAdresse: UtenlandskAdresse
    ukjentBosted: UkjentBosted

    folkeregistermetadata: Folkeregistermetadata!
    metadata: Metadata!
}

type Bostedsadresse {
    angittFlyttedato: Date
    gyldigFraOgMed: DateTime
    gyldigTilOgMed: DateTime

    coAdressenavn: String
    vegadresse: Vegadresse
    matrikkeladresse: Matrikkeladresse
    utenlandskAdresse: UtenlandskAdresse
    ukjentBosted: UkjentBosted

    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type Oppholdsadresse {
    gyldigFraOgMed: DateTime
    gyldigTilOgMed: DateTime

    coAdressenavn: String
    utenlandskAdresse: UtenlandskAdresse
    vegadresse: Vegadresse
    matrikkeladresse: Matrikkeladresse
    oppholdAnnetSted: String

    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type Kontaktadresse {
    gyldigFraOgMed: DateTime
    gyldigTilOgMed: DateTime
    type: KontaktadresseType!

    coAdressenavn: String
    postboksadresse: Postboksadresse
    vegadresse: Vegadresse
    postadresseIFrittFormat: PostadresseIFrittFormat
    utenlandskAdresse: UtenlandskAdresse
    utenlandskAdresseIFrittFormat: UtenlandskAdresseIFrittFormat

    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

enum KontaktadresseType {
    Innland,
    Utland
}

type Vegadresse {
    matrikkelId: Long
    husnummer: String
    husbokstav: String
    bruksenhetsnummer: String
    adressenavn: String
    kommunenummer: String
    bydelsnummer: String
    tilleggsnavn: String
    postnummer: String
    koordinater: Koordinater
}

type Matrikkeladresse {
    matrikkelId: Long
    bruksenhetsnummer: String
    tilleggsnavn: String
    postnummer: String
    kommunenummer: String
    koordinater: Koordinater
}

type UkjentBosted {
    bostedskommune: String
}

type UtenlandskAdresse {
    adressenavnNummer: String
    bygningEtasjeLeilighet: String
    postboksNummerNavn: String
    postkode: String
    bySted: String
    regionDistriktOmraade: String
    landkode: String!
}

type UtenlandskAdresseIFrittFormat {
    adresselinje1: String
    adresselinje2: String
    adresselinje3: String
    postkode: String
    byEllerStedsnavn: String
    landkode: String!
}

type Postboksadresse {
    postbokseier: String
    postboks: String!
    postnummer: String
}

type PostadresseIFrittFormat {
    adresselinje1: String
    adresselinje2: String
    adresselinje3: String
    postnummer: String
}

type Koordinater {
    x: Float
    y: Float
    z: Float
    kvalitet: Int
}

type FalskIdentitet {
    erFalsk: Boolean!
    rettIdentitetVedIdentifikasjonsnummer: String
    rettIdentitetErUkjent: Boolean
    rettIdentitetVedOpplysninger: FalskIdentitetIdentifiserendeInformasjon
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type FalskIdentitetIdentifiserendeInformasjon {
    personnavn: Personnavn!
    foedselsdato: Date
    statsborgerskap: [String!]!
    kjoenn: KjoennType
}

type KontaktinformasjonForDoedsbo {
    skifteform: KontaktinformasjonForDoedsboSkifteform!
    attestutstedelsesdato: Date!
    personSomKontakt: KontaktinformasjonForDoedsboPersonSomKontakt
    advokatSomKontakt: KontaktinformasjonForDoedsboAdvokatSomKontakt
    organisasjonSomKontakt: KontaktinformasjonForDoedsboOrganisasjonSomKontakt
    adresse: KontaktinformasjonForDoedsboAdresse!
    folkeregistermetadata: Folkeregistermetadata!
    metadata: Metadata!
}

enum KontaktinformasjonForDoedsboSkifteform {
    OFFENTLIG
    ANNET
}

type KontaktinformasjonForDoedsboPersonSomKontakt {
    foedselsdato: Date
    personnavn: Personnavn
    identifikasjonsnummer: String
}

type KontaktinformasjonForDoedsboAdvokatSomKontakt {
    personnavn: Personnavn!
    organisasjonsnavn: String
    organisasjonsnummer: String
}

type KontaktinformasjonForDoedsboOrganisasjonSomKontakt {
    kontaktperson: Personnavn
    organisasjonsnavn: String!
    organisasjonsnummer: String
}

type KontaktinformasjonForDoedsboAdresse {
    adresselinje1: String!
    adresselinje2: String
    poststedsnavn: String!
    postnummer: String!
    landkode: String
}

type UtenlandskIdentifikasjonsnummer {
    identifikasjonsnummer: String!
    utstederland: String!
    opphoert: Boolean!
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type Adressebeskyttelse {
    gradering: AdressebeskyttelseGradering!
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

enum AdressebeskyttelseGradering {
    STRENGT_FORTROLIG_UTLAND,
    STRENGT_FORTROLIG,
    FORTROLIG,
    UGRADERT
}

type Foedsel {
    foedselsaar: Int
    foedselsdato: Date
    foedeland: String
    foedested: String
    foedekommune: String
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type Foedested {
    foedeland: String
    foedested: String
    foedekommune: String
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type Foedselsdato {
    foedselsdato: Date
    foedselsaar: Int
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type Kjoenn {
    kjoenn: KjoennType
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type Doedsfall {
    doedsdato: Date
    metadata: Metadata!
    folkeregistermetadata: Folkeregistermetadata
}

type ForelderBarnRelasjon {
    relatertPersonsIdent: String
    relatertPersonsRolle: ForelderBarnRelasjonRolle!
    minRolleForPerson: ForelderBarnRelasjonRolle
    relatertPersonUtenFolkeregisteridentifikator: RelatertBiPerson
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type DoedfoedtBarn {
    dato: Date
    folkeregistermetadata: Folkeregistermetadata!
    metadata: Metadata!
}

enum Familierelasjonsrolle {
    BARN,
    MOR,
    FAR,
    MEDMOR
}

enum ForelderBarnRelasjonRolle {
    BARN,
    MOR,
    FAR,
    MEDMOR
}

type Folkeregisterpersonstatus {
    status: String!
    forenkletStatus: String!
    folkeregistermetadata: Folkeregistermetadata!
    metadata: Metadata!
}

type GeografiskTilknytning {
    gtType: GtType!
    gtKommune: String
    gtBydel: String
    gtLand: String
    regel: String!
}

type hentGeografiskTilknytningBolkResult {
    ident: String!
    geografiskTilknytning: GeografiskTilknytning
    code: String!
}

enum GtType {
    KOMMUNE,
    BYDEL,
    UTLAND,
    UDEFINERT
}

type Navn {
    fornavn: String!
    mellomnavn: String
    etternavn: String!
    forkortetNavn: String @deprecated
    originaltNavn: OriginaltNavn
    gyldigFraOgMed: Date

    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type OriginaltNavn {
    fornavn: String
    mellomnavn: String
    etternavn: String
}

type Personnavn {
    fornavn: String!
    mellomnavn: String
    etternavn: String!
}

enum KjoennType {
    MANN, KVINNE, UKJENT
}

type Identitetsgrunnlag {
    status: Identitetsgrunnlagsstatus!
    folkeregistermetadata: Folkeregistermetadata!
    metadata: Metadata!
}

enum Identitetsgrunnlagsstatus {
    IKKE_KONTROLLERT
    KONTROLLERT,
    INGEN_STATUS
}

type Folkeregistermetadata {
    ajourholdstidspunkt: DateTime
    gyldighetstidspunkt: DateTime
    opphoerstidspunkt: DateTime
    kilde: String
    aarsak: String
    sekvens: Int
}

type Telefonnummer {
    landskode: String!
    nummer: String!
    prioritet: Int!
    metadata: Metadata!
}

type TilrettelagtKommunikasjon {
    talespraaktolk: Tolk
    tegnspraaktolk: Tolk
    metadata: Metadata!
}

type Tolk {
    spraak: String
}

type Folkeregisteridentifikator {
    identifikasjonsnummer: String!
    status: String!
    type: String!
    folkeregistermetadata: Folkeregistermetadata!
    metadata: Metadata!
}
type Navspersonidentifikator {
    identifikasjonsnummer: String!
    metadata: Metadata!
}

type SikkerhetstiltakKontaktperson {
    personident: String!
    enhet: String!
}

type Sikkerhetstiltak {
    tiltakstype: String!
    beskrivelse: String!
    kontaktperson: SikkerhetstiltakKontaktperson
    gyldigFraOgMed: Date!
    gyldigTilOgMed: Date!
    metadata: Metadata!
}

type Statsborgerskap {
    land: String!
    bekreftelsesdato: Date
    gyldigFraOgMed: Date
    gyldigTilOgMed: Date
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type Opphold {
    type: Oppholdstillatelse!
    oppholdFra: Date
    oppholdTil: Date
    folkeregistermetadata: Folkeregistermetadata!
    metadata: Metadata!
}

enum Oppholdstillatelse {
    MIDLERTIDIG
    PERMANENT
    OPPLYSNING_MANGLER
}

type Sivilstand {
    type: Sivilstandstype!
    gyldigFraOgMed: Date
    relatertVedSivilstand: String
    bekreftelsesdato: Date

    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

enum Sivilstandstype {
    UOPPGITT
    UGIFT
    GIFT
    ENKE_ELLER_ENKEMANN
    SKILT
    SEPARERT
    REGISTRERT_PARTNER
    SEPARERT_PARTNER
    SKILT_PARTNER
    GJENLEVENDE_PARTNER
}

type InnflyttingTilNorge {
    fraflyttingsland: String
    fraflyttingsstedIUtlandet: String
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type UtflyttingFraNorge {
    tilflyttingsland: String
    tilflyttingsstedIUtlandet: String
    utflyttingsdato: Date
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type VergeEllerFullmektig {
    navn: Personnavn @deprecated(reason:"Erstattes av navn iidentifiserendeInformasjon")
    identifiserendeInformasjon: IdentifiserendeInformasjon
    motpartsPersonident: String
    omfang: String
    omfangetErInnenPersonligOmraade: Boolean
    tjenesteomraade:[Tjenesteomraade!]
}
type IdentifiserendeInformasjon {
    navn: Personnavn
    kjoenn: String
    foedselsdato:Date
    statsborgerskap: [String!]

}
type Tjenesteomraade {
    tjenesteoppgave: String
    tjenestevirksomhet: String
}

type VergemaalEllerFremtidsfullmakt {
    type: String
    embete: String
    vergeEllerFullmektig: VergeEllerFullmektig!

    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}


type RettsligHandleevne {
    rettsligHandleevneomfang: String
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type Foreldreansvar {
    ansvar: String
    ansvarlig: String
    ansvarssubjekt: String
    ansvarligUtenIdentifikator: RelatertBiPerson

    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type RelatertBiPerson {
    navn: Personnavn
    foedselsdato: Date
    statsborgerskap: String
    kjoenn: KjoennType
}

type Metadata {
    # I PDL så får alle forekomster av en opplysning en ID som representerer dens unike forekomst.
    # F.eks, så vil en Opprett ha ID X, korriger ID Y (der hvor den spesifiserer at den korrigerer X).
    # Dersom en opplysning ikke er lagret i PDL, så vil denne verdien ikke være utfylt.
    opplysningsId: String

    # Master refererer til hvem som eier opplysningen, f.eks så har PDL en kopi av Folkeregisteret, da vil master være FREG og eventuelle endringer på dette må gå via Folkeregisteret (API mot dem eller andre rutiner).
    master: String!

    # En liste over alle endringer som har blitt utført over tid.
    # Vær obs på at denne kan endre seg og man burde takle at det finnes flere korrigeringer i listen, så dersom man ønsker å kun vise den siste, så må man selv filtrere ut dette.
    # Det kan også ved svært få tilfeller skje at opprett blir fjernet. F.eks ved splitt tilfeller av identer. Dette skal skje i svært få tilfeller. Dersom man ønsker å presentere opprettet tidspunktet, så blir det tidspunktet på den første endringen.
    endringer: [Endring!]!

    # Feltet betegner hvorvidt dette er en funksjonelt historisk opplysning, for eksempel en tidligere fraflyttet adresse eller et foreldreansvar som er utløpt fordi barnet har fylt 18 år.
    # I de fleste tilfeller kan dette utledes ved å se på de andre feltene i opplysningen. Dette er imidlertid ikke alltid tilfellet, blant annet for foreldreansvar.
    # Feltet bør brukes av konsumenter som henter informasjon fra GraphQL med historikk, men som også trenger å utlede gjeldende informasjon.
    historisk: Boolean!
}

# Endring som har blitt utført på opplysningen. F.eks: Opprett -> Korriger -> Korriger
type Endring {
    # Hvilke type endring som har blitt utført.
    type: Endringstype!
    # Tidspunktet for registrering.
    registrert: DateTime!
    # Hvem endringen har blitt utført av, ofte saksbehandler (f.eks Z990200), men kan også være system (f.eks srvXXXX). Denne blir satt til "Folkeregisteret" for det vi får fra dem.
    registrertAv: String!
    # Hvilke system endringen har kommet fra (f.eks srvXXX). Denne blir satt til "FREG" for det vi får fra Folkeregisteret.
    systemkilde: String!
    # Opphavet til informasjonen. I NAV blir dette satt i forbindelse med registrering (f.eks: Sykehuskassan).
    # Fra Folkeregisteret får vi opphaven til dems opplysning, altså NAV, UDI, Politiet, Skatteetaten o.l.. Fra Folkeregisteret kan det også være tekniske navn som: DSF_MIGRERING, m.m..
    kilde: String!

    hendelseId:String!
}

enum Endringstype {
    OPPRETT
    KORRIGER
    OPPHOER
}

input Criterion {
    # Feltnavn inkludert sti til ønsket felt (Eksempel: person.navn.fornavn)
    fieldName:String

    and:[Criterion]
    or:[Criterion]
    not:[Criterion]

    searchRule:SearchRule
    # Søk i historiske data
    # true = søker kun i historiske data.
    # false = søker kun i gjeldende data.
    # null = søke i både historiske og gjeldende data.
    searchHistorical:Boolean
}


input SearchRule {
    # Sjekker om feltet finnes / at det ikke har en null verdi.
    exists:Boolean
    # Filtrerer bort treff hvor felt inneholder input verdi
    notEquals:String
    # Begrenser treff til kun de hvor felt har input verdi
    equals:String
    # Gir treff når opgitt felt inneholder en eller flere ord fra input verdien.
    contains:String
    # Søk som gir treff også for små variasjoner i skrivemåte
    fuzzy:String
    # Søk som gir tilfeldig poengsum til hvert treff (kun ment til generering av testdata)
    random:Float
    # Bruk "?" som wildcard for enkelt tegn, og "*" som wildcard for 0 eller flere tegn.
    wildcard:String
    # Gir treff når opgitt feltstarter med opgitt verdi.
    startsWith:String
    # Regex søk for spesielle situasjoner (Dette er en treg opprasjon og bør ikke brukes)
    regex:String
    # Brukes til søke etter datoer som kommer etter opgitt dato.
    after:String
    # Brukes til søke etter datoer som kommer før opgitt dato.
    before:String
    # Brukes til å søke i tall og finner verdier som er mindre en input verdi.
    lessThan:String
    # Brukes til å søke i tall og finner verdier som er størren en input verdi.
    greaterThan:String
    # Søk fra og med (se fromExcluding for bare fra men ikke med)
    # kan benyttes på tall og dato
    from:String
    # Søk til og med (se toExcluding for bare til men ikke med)
    # kan benyttes på tall og dato
    to:String
    # Søk fra men ikke med oppgitt verdi
    # kan benyttes på tall og dato
    fromExcluding:String,
    # Søk til men ikke med oppgitt verdi
    # kan benyttes på tall og dato
    toExcluding:String

    # [Flag] Kan brukes til å overstyre standard oppførsellen for søk i felter (standard er case insensitive)
    caseSensitive:Boolean @deprecated(reason: "Denne funksjonen ble lite brukt og er deprecated, dette flagget vil ikke lenger ha noe effekt og vil bli fjernet i fremtiden")
    # [Flag] Brukes til å deaktivere fonetisk søk feltene som har dette som standard (Navn)
    disablePhonetic:Boolean
    # Boost brukes til å gi ett søkekriterie høyere eller lavere vektlegging en de andre søke kriteriene.
    boost:Float
}

input Paging {
    # Hvilken side i resultatsettet man ønsker vist.
    pageNumber:Int = 1
    # antall treff per side (maks 100)
    resultsPerPage:Int = 10
    # Liste over felter man ønsker resultatene sortert etter
    # Standard er "score". Score er poengsummen Elasticsearch tildeler hvert resultat.
    sortBy:[SearchSorting]
}

input SearchSorting {
    # Feltnavn ikludert sti til ønsket felt (eksepmel: person.navn.fornavn)
    fieldName:String!
    direction:Direction!
}
enum Direction {
    ASC,
    DESC
}
type PersonSearchResult {
    # treff liste
    hits : [PersonSearchHit!]!
    # Side nummer for siden som vises
    pageNumber:Int
    # Totalt antall sider
    totalPages:Int
    # Totalt antall treff (øvre grense er satt til 10 000)
    totalHits:Int

}
type PersonSearchHit {
    # forespurte data
    person :Person
    # forespurte data
    identer(historikk: Boolean = false): [IdentInformasjon!]!
    # Poengsummen elasticsearch  har gitt dette resultatet (brukt til feilsøking, og tuning av søk)
    score :Float
    # Infromasjon om hva som ga treff i søke resultatet.
    highlights:[PersonSearchHighlight]
}
type PersonSearchHighlight {
    # Navn/Sti til opplysningen som ga treff. Merk at dette ikke er feltet som ga treff men opplysningen.
    # F.eks. hvis du søker på person.navn.fornavn så vil opplysingen være person.navn.
    opplysning:String
    # Gitt att opplysningen som ga treff har en opplysningsId så vil den returneres her.
    # alle søk under person skal ha opplysningsId, men søk i identer vil kunne returnere treff uten opplysningsId.
    opplysningsId: String
    # Forteller hvorvidt opplysningen som ga treff er markert som historisk.
    historisk: Boolean
    # liste med feltene og verdiene som ga treff.
    # Merk at for fritekst søk så vil disse kunne referere til hjelpe felter som ikke er synelig i resultatene.
    matches:[SearchMatch]
}
type SearchMatch {
    # feltnavn med sti til feltet so ga treff.
    field:String!
    type: String
    # Verdien som ga treff
    fragments: [String]
}
type AdresseSearchResult {
    hits : [AdresseSearchHit!]!
    pageNumber:Int,
    totalPages:Int
    totalHits:Int

}
type AdresseSearchHit {
    vegadresse : VegadresseResult
    matrikkeladresse : MatrikkeladresseResult
    score :Float
}
type VegadresseResult {
    matrikkelId:String
    husnummer:Int
    husbokstav:String
    adressenavn:String
    adressekode:String
    tilleggsnavn:String
    fylkesnavn:String
    fylkesnummer:String
    kommunenavn:String
    kommunenummer:String
    postnummer:String
    poststed:String
    bydelsnavn:String
    bydelsnummer:String
}
type MatrikkeladresseResult {
    matrikkelId:String
    tilleggsnavn:String
    kommunenummer:String
    gaardsnummer:String
    bruksnummer:String
    postnummer:String
    poststed:String
}

type AdresseCompletionResult {
    suggestions: [String!]!
    addressFound : CompletionAdresse
}
type CompletionAdresse {
    vegadresse : VegadresseResult
    matrikkeladresse : MatrikkeladresseResult
}

input CompletionParameters {

    completionField: String!
    maxSuggestions: Int
    fieldValues: [CompletionFieldValue]!
}
input CompletionFieldValue {
    fieldName: String!
    fieldValue: String
}

package no.nav.tjeneste.virksomhet.sak.v1;

import java.util.List;
import java.util.stream.Collectors;

import javax.jws.HandlerChain;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import javax.xml.ws.soap.Addressing;

import no.nav.tjeneste.virksomhet.sak.v1.binding.FinnSakForMangeForekomster;
import no.nav.tjeneste.virksomhet.sak.v1.binding.FinnSakUgyldigInput;
import no.nav.tjeneste.virksomhet.sak.v1.binding.HentSakSakIkkeFunnet;
import no.nav.tjeneste.virksomhet.sak.v1.binding.SakV1;
import no.nav.tjeneste.virksomhet.sak.v1.feil.UgyldigInput;
import no.nav.tjeneste.virksomhet.sak.v1.informasjon.Aktoer;
import no.nav.tjeneste.virksomhet.sak.v1.informasjon.Fagomraader;
import no.nav.tjeneste.virksomhet.sak.v1.informasjon.Fagsystemer;
import no.nav.tjeneste.virksomhet.sak.v1.informasjon.Sak;
import no.nav.tjeneste.virksomhet.sak.v1.meldinger.FinnSakRequest;
import no.nav.tjeneste.virksomhet.sak.v1.meldinger.FinnSakResponse;
import no.nav.tjeneste.virksomhet.sak.v1.meldinger.HentSakRequest;
import no.nav.tjeneste.virksomhet.sak.v1.meldinger.HentSakResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.7-b01-
 * Generated source version: 2.1
 */
@Addressing
@WebService(name = "Sak_v1", targetNamespace = "http://nav.no/tjeneste/virksomhet/sak/v1")
@HandlerChain(file = "Handler-chain.xml")
public class SakServiceMockImpl implements SakV1 {

    private static final Logger LOG = LoggerFactory.getLogger(SakServiceMockImpl.class);
    private GsakRepo repo;

    public SakServiceMockImpl(GsakRepo repo) {
        this.repo = repo;
    }

    /**
     * @param request
     * @return returns no.nav.tjeneste.virksomhet.sak.v1.meldinger.FinnSakResponse
     * @throws FinnSakUgyldigInput
     * @throws FinnSakForMangeForekomster
     */
    @Override
    @WebMethod(action = "http://nav.no/tjeneste/virksomhet/sak/v1/Sak_v1/finnSakRequest")
    @WebResult(name = "response", targetNamespace = "")
    @RequestWrapper(localName = "finnSak", targetNamespace = "http://nav.no/tjeneste/virksomhet/sak/v1", className = "no.nav.tjeneste.virksomhet.sak.v1.FinnSak")
    @ResponseWrapper(localName = "finnSakResponse", targetNamespace = "http://nav.no/tjeneste/virksomhet/sak/v1", className = "no.nav.tjeneste.virksomhet.sak.v1.FinnSakResponse")
    public FinnSakResponse finnSak(
                                   @WebParam(name = "request", targetNamespace = "") FinnSakRequest request)
            throws FinnSakForMangeForekomster, FinnSakUgyldigInput {

        LOG.info("finnSak. Bruker: AktoerIdent: {}. FagsystemSakId {}", request.getBruker().getIdent(), request.getFagsystemSakId());
        Aktoer bruker = request.getBruker();
        Fagsystemer fagsystem = request.getFagsystem();
        String fagsystemSakID = request.getFagsystemSakId();
        List<Fagomraader> fagomraadeListe = request.getFagomraadeListe();

        if (bruker == null && (request.getFagsystemSakId() == null || fagsystemSakID == null)) {
            throw new FinnSakUgyldigInput("enten BrukerModell eller FagsystemSakID+Fagsystem må være satt", new UgyldigInput());
        }

        List<Sak> resultList = repo.getAlleSaker().stream()
            .filter(sak -> bruker == null || sakGjelderBruker(sak, bruker))
            .filter(sak -> fagsystem == null || sak.getFagsystem().getValue().equals(fagsystem.getValue()))
            .filter(sak -> (fagomraadeListe == null || fagomraadeListe.isEmpty()) || fagomraadeListe.stream()
                .anyMatch(fagomraade -> fagomraade.getValue().equals(sak.getFagomraade().getValue())))
            .collect(Collectors.toList());

        FinnSakResponse response = new FinnSakResponse();
        response.getSakListe().addAll(resultList);
        
        return response;
    }

    /**
     * @param request
     * @return returns no.nav.tjeneste.virksomhet.sak.v1.meldinger.HentSakResponse
     * @throws HentSakSakIkkeFunnet
     */
    @Override
    @WebMethod(action = "http://nav.no/tjeneste/virksomhet/sak/v1/Sak_v1/hentSakRequest")
    @WebResult(name = "response", targetNamespace = "")
    @RequestWrapper(localName = "hentSak", targetNamespace = "http://nav.no/tjeneste/virksomhet/sak/v1", className = "no.nav.tjeneste.virksomhet.sak.v1.HentSak")
    @ResponseWrapper(localName = "hentSakResponse", targetNamespace = "http://nav.no/tjeneste/virksomhet/sak/v1", className = "no.nav.tjeneste.virksomhet.sak.v1.HentSakResponse")
    public HentSakResponse hentSak(
                                   @WebParam(name = "request", targetNamespace = "") HentSakRequest request)
            throws HentSakSakIkkeFunnet {
        LOG.info("hentSak. SakId: {}", request.getSakId());
        HentSakResponse response = new HentSakResponse();
        response.setSak(repo.hentSak(request.getSakId()));
        return response;

    }

    /**
     *
     */
    @Override
    @WebMethod(action = "http://nav.no/tjeneste/virksomhet/sak/v1/Sak_v1/pingRequest")
    @RequestWrapper(localName = "ping", targetNamespace = "http://nav.no/tjeneste/virksomhet/sak/v1", className = "no.nav.tjeneste.virksomhet.sak.v1.Ping")
    @ResponseWrapper(localName = "pingResponse", targetNamespace = "http://nav.no/tjeneste/virksomhet/sak/v1", className = "no.nav.tjeneste.virksomhet.sak.v1.PingResponse")
    public void ping() { LOG.info("Ping mottatt og besvart."); }

    private boolean sakGjelderBruker(Sak sak, Aktoer bruker) {
        for (Aktoer gjelderBruker : sak.getGjelderBrukerListe()) {
            if (bruker.getIdent().equals(gjelderBruker.getIdent())) {
                return true;
            }
        }
        return false;
    }

}
